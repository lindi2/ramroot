#!/bin/bash
build_grubenv() {
    (
	echo "# GRUB Environment Block"
	cat
	for i in $(seq 1 1024); do
	    echo -n "#"
	done
    ) | dd bs=1 count=1024 2> /dev/null
}

if [ "$(whoami)" != "root" ]; then
    echo "Sorry, you need to be root to run this tool"
    exit 1
fi

default="$1"
fallback="$2"
fallback_timeout="$3"

if [ "$default" = "" ]; then
    (
        cat <<EOF
usage: ramroot-update-grub SNAPSHOT [FALLBACK-SNAPSHOT FALLBACK-TIMEOUT]

Configure boot loader to boot SNAPSHOT. If FALLBACK-SNAPSHOT and
FALLBACK-TIMEOUT are specified the system will start with a watchdog
that will reset the system to FALLBACK-SNAPSHOT if the watchdog is not
refreshed regularly or stopped. You can control the watchdog using the
ramroot-watchdog command.
EOF
    ) 1>&2
    exit 1
fi

if [ -e /etc/ramroot/boot-info ]; then
    . /etc/ramroot/boot-info
fi
if [ "$ramroot_build" = "" ]; then
    ramroot="$(mktemp -d)"
    if ! mount -o ro -U "$boot_uuid" "$ramroot"; then
        echo "Unable to mount ramroot snapshot filesystem"
        exit 1
    fi
fi

if [ ! -d "$ramroot/snapshot/$default/boot" ]; then
    echo "Default snapshot does not exist"
    exit 1
fi


entries="$(mktemp)"
idx=0
for i in $(cd "$ramroot/snapshot" && echo *); do
    if [ "$i" = "$default" ]; then
	default_idx=$idx
    fi
    if [ "$i" = "$fallback" ]; then
	fallback_idx=$idx
    fi
    title="$(cat "$ramroot/snapshot/$i/etc/ramroot/grub-title")"
    extraopts=" ramroot_uuid=$boot_uuid ramroot_snapshot=$i"
    extraopts+=" $(cat "$ramroot/snapshot/$i/etc/ramroot/grub-extraopts")"
    if [ "$fallback" != "" -a "$i" = "$default" ]; then
	extraopts+=" ramroot_watchdog=$fallback_timeout"
    fi
    cat >> $entries <<EOF
menuentry '$title' --class debian --class gnu-linux --class gnu --class os {
EOF
    if [ "$fallback" != "" -a "$i" = "$default" ]; then
	echo " set savedefault=$fallback_idx" >> $entries
	echo " save_env savedefault" >> $entries
    fi
    cat >> "$entries" <<EOF
 insmod part_msdos
 insmod ext2
 set root='(hd0,msdos1)'
 search --no-floppy --fs-uuid --set $boot_uuid
 echo 'Loading $title'
 linux /snapshot/$i/vmlinuz $extraopts
 echo 'Loading initial ramdisk ...'
 initrd /snapshot/$i/initrd.img
 echo 'Now booting the kernel ...'
}
EOF
    echo >> "$entries"
    idx="$(expr $idx + 1)"
done

grubcfg="$(mktemp)"
echo "set timeout=10" >> "$grubcfg"
echo "set root='(hd0,msdos1)'" >> "$grubcfg"
if [ "$fallback" != "" ]; then
    echo "load_env" >> $grubcfg
    echo "set default=\${savedefault}" >> "$grubcfg"
else
    echo "set default=\"$default_idx\"" >> "$grubcfg"
fi
echo >> "$grubcfg"
cat "$entries" >> "$grubcfg"
rm "$entries"

if ! grep initrd "$grubcfg" > /dev/null; then
    echo incomplete grub.cfg
    exit 1
fi

if [ "$ramroot_build" = "" ]; then
    mount -o remount,rw "$ramroot"
fi
mv "$grubcfg" "$ramroot/boot/grub/grub.cfg"
grubcfginfo="$(mktemp)"
echo default=$default >> "$grubcfginfo"
if [ "$fallback" != "" ]; then
    echo fallback=$fallback >> "$grubcfginfo"
    echo fallback_timeout=$fallback_timeout >> "$grubcfginfo"
fi
mv "$grubcfginfo" "$ramroot/boot/grub/grub.cfg.info"
if [ "$fallback" != "" ]; then
    echo "savedefault=$default_idx" | build_grubenv > "$ramroot/boot/grub/grubenv"
else
    echo -n "" | build_grubenv > "$ramroot/boot/grub/grubenv"
fi
if [ "$ramroot_build" = "" ]; then
    umount "$ramroot"
fi
